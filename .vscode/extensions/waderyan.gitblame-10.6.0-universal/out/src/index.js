"use strict";var M=Object.defineProperty;var It=Object.getOwnPropertyDescriptor;var At=Object.getOwnPropertyNames;var Rt=Object.prototype.hasOwnProperty;var kt=(e,t)=>{for(var i in t)M(e,i,{get:t[i],enumerable:!0})},Bt=(e,t,i,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of At(t))!Rt.call(e,o)&&o!==i&&M(e,o,{get:()=>t[o],enumerable:!(r=It(t,o))||r.enumerable});return e};var Dt=e=>Bt(M({},"__esModule",{value:!0}),e);var ne={};kt(ne,{activate:()=>oe});module.exports=Dt(ne);var Ut=require("vscode");var a=require("vscode"),Et=require("node:path");var u=e=>e?.document.uri.scheme==="file";var V=require("vscode"),s=e=>V.workspace.getConfiguration("gitblame").get(e);var H=require("vscode"),Mt=1e3,_=60*Mt,Q=60*_,K=24*Q,q=365.25*K,St=q/12,Ot=[["year",q],["month",St],["day",K],["hour",Q],["minute",_]],S=(e,t)=>{let i=e.valueOf()-t.valueOf();for(let[r,o]of Ot)if(i>o)return new Intl.RelativeTimeFormat(H.env.language).format(-1*Math.round(i/o),r);return"right now"};var b=({author:e,committer:t,hash:i,summary:r})=>{let o=new Date,n=({date:D})=>D.toISOString().slice(0,10),m=S(o,e.date),x=S(o,t.date),h=(D,Ft)=>(Lt="")=>D.substr(0,parseInt(Lt||Ft,10));return{"author.mail":e.mail,"author.name":e.name,"author.timestamp":e.timestamp,"author.tz":e.tz,"author.date":n(e),"committer.mail":t.mail,"committer.name":t.name,"committer.timestamp":t.timestamp,"committer.tz":t.tz,"committer.date":n(t),"commit.hash":h(i,"40"),"commit.hash_short":h(i,"7"),"commit.summary":h(r,"65536"),"time.ago":m,"time.c_ago":x}};var Nt=(e,t,i)=>r=>{let o=e.indexOf(r,t);return o===-1||o>i?i:o},$t=(e,t)=>(i,r)=>r===i||t===i?"":e.substring(i+1,r);function Wt(e,t,i){let r=t.indexOf("}",i),o=Nt(t,i,r),n=$t(t,r),m=o(","),x=o("|"),h=t.substring(i,Math.min(m,x));return[e[h]??h,n(x,r),n(m,x)]}function*Gt(e,t){let i=0,r=0,o=0;for(let n=0;n<e.length;n++)if(o===0&&e[n]==="$")o=2;else if(o===2&&e[n]==="{")o=1,r=n-1,yield[e.slice(i,r)],i=r;else if(o===2)o=0;else if(o===1){o=0;let m=e.indexOf("}",n);if(m===-1)break;yield Wt(t,e,n),i=m+1}yield[e.slice(i)]}var Y=(e,t="")=>t==="u"?e.toUpperCase():t==="l"?e.toLowerCase():t?`${e}|${t}`:e,zt=e=>e.replace(/\u202e/g,""),v=(e,t)=>{let i="";for(let[r,o,n]of Gt(e,t))typeof r=="string"?i+=Y(r,o):i+=Y(r(n),o);return zt(i)},X=e=>v(s("statusBarMessageFormat"),b(e)),Z=e=>v(s("inlineMessageFormat"),b(e));var p=require("vscode");function d(e){return/^0{40}$/.test(e.hash)}var J=require("vscode"),l=()=>J.window.activeTextEditor,O="N:-1",N=({document:e,selection:t})=>e.uri.scheme!=="file"?O:`${e.fileName}:${t.active.line}`;var T=class{statusBar;decorationType;configChange;ongoingViewUpdateRejects=[];constructor(){this.decorationType=p.window.createTextEditorDecorationType({}),this.statusBar=this.createStatusBarItem(),this.configChange=p.workspace.onDidChangeConfiguration(t=>{t.affectsConfiguration("gitblame")&&this.createStatusBarItem()})}set(t,i,r=!0){t?d(t)?(this.text(s("statusBarMessageNoCommit"),!1),i&&this.createLineDecoration(s("inlineMessageNoCommit"),i,r)):(this.text(X(t),!0),i&&this.createLineDecoration(Z(t),i,r)):this.clear()}clear(){this.text("",!1),this.removeLineDecoration()}activity(){this.text("$(sync~spin) Waiting for git blame response",!1)}dispose(){this.statusBar?.dispose(),this.decorationType.dispose(),this.configChange.dispose()}command(){let t=s("statusBarMessageClickAction");return t==="Open tool URL"?"gitblame.online":t==="Open git show"?"gitblame.gitShow":"gitblame.quickInfo"}text(t,i){this.statusBar.text=`$(git-commit) ${t.trimEnd()}`,this.statusBar.tooltip=`git blame${i?"":" - No info about the current line"}`,this.statusBar.command=i?this.command():void 0}createStatusBarItem(){this.statusBar&&this.statusBar.dispose();let t=p.window.createStatusBarItem(p.StatusBarAlignment.Right,s("statusBarPositionPriority"));return t.show(),t}async createLineDecoration(t,i,r){if(!s("inlineMessageEnabled"))return;let o=s("inlineMessageMargin"),n=new p.Position(i.selection.active.line,Number.MAX_SAFE_INTEGER);this.removeLineDecoration(),await this.delayUpdate(r?s("delayBlame"):0)&&i.setDecorations?.(this.decorationType,[{renderOptions:{after:{contentText:t,margin:`0 0 0 ${o}rem`,color:new p.ThemeColor("editorCodeLens.foreground")}},range:new p.Range(n,n)}])}removeLineDecoration(){l()?.setDecorations?.(this.decorationType,[])}preUpdate(t){if(this.clear(),!u(t))return!1;for(let i of this.ongoingViewUpdateRejects)i();return this.activity(),!0}async delayUpdate(t){if(t>0)try{return await new Promise((i,r)=>{this.ongoingViewUpdateRejects.push(r),setTimeout(()=>i(!0),t)})}catch{return!1}return!0}};var F=require("node:fs");var gt=require("node:fs/promises"),ft=require("node:path");var g=(e,t=" ")=>{let i=e.indexOf(t[0]);return i===-1?[e,""]:[e.substr(0,i),e.substr(i+1).trim()]};var jt=e=>({author:{mail:"",name:"",timestamp:"",date:new Date,tz:""},committer:{mail:"",name:"",timestamp:"",date:new Date,tz:""},hash:e,summary:""}),Vt=e=>({commit:e,filename:""});function Ht(){return new Promise(setImmediate)}var _t=25;async function*Qt(e){let t=0;for(;t<e.length;){let i=e.indexOf(`
`,t);yield g(e.toString("utf8",t,i)),i%_t===0&&await Ht(),t=i+1}}var Kt=(e,t,i)=>{t==="time"?(e.timestamp=i,e.date=new Date(parseInt(i,10)*1e3)):t==="tz"||t==="mail"?e[t]=i:t===""&&(e.name=i)},qt=(e,t,i)=>{let[r,o]=g(e,"-");(r==="author"||r==="committer")&&Kt(i[r],o,t)},et=e=>/^\w{40}$/.test(e),Yt=(e,t)=>et(e)&&/^\d+ \d+ \d+$/.test(t),Xt=(e,t,i)=>{e==="summary"?i.summary=t:et(e)?i.hash=e:qt(e,t,i)};function*Zt(e){let[t,i,r]=e.split(" ").map(Number);for(let o=0;o<r;o++)yield{source:t+o,result:i+o}}function*tt(e,t,i){if(!(e===void 0||t===void 0)){i.set(e.commit.hash,e.commit);for(let r of t)yield{...e,line:r}}}async function*Jt(e,t){let i,r;for await(let[o,n]of Qt(e))Yt(o,n)&&(i=Vt(t.get(o)??jt(o)),r=Zt(n)),i&&(o==="filename"?(i.filename=n,yield*tt(i,r,t)):Xt(o,n,i.commit));yield*tt(i,r,t)}async function*it(e){let t=new Map;for await(let i of e??[])yield*Jt(i,t)}async function rt(e){for await(let t of e??[])if(typeof t=="string")throw new Error(t)}var ot=require("vscode"),c=class e{static instance;out;static getInstance(){return e.instance??=new e,e.instance}constructor(){this.out=ot.window.createOutputChannel("Git Blame",{log:!0})}static error(t){t instanceof Error&&e.getInstance().out.error(t)}static info(t){e.getInstance().out.info(t)}dispose(){e.instance=void 0,this.out.dispose()}};var at=require("node:child_process"),W=require("node:path"),mt=require("vscode");var nt=require("node:child_process");var st=async(e,t,i={})=>(c.info(`${e} ${t.join(" ")}`),new Promise(r=>(0,nt.execFile)(e,t,{...i,encoding:"utf8"},(o,n,m)=>{o||m?(c.error(o||m),r("")):r(n.trim())})));var $=()=>{let e=mt.extensions.getExtension("vscode.git");return e?.exports.enabled?e.exports.getAPI(1).git.path:"git"},f=(e,...t)=>st($(),t,{cwd:(0,W.dirname)(e)}),ct=async e=>{let t=l();return u(t)?f(t.document.fileName,"ls-remote","--get-url",e):""},lt=async e=>{let t=l();if(!u(t))return"";let{fileName:i}=t.document,r=await f(i,"symbolic-ref","-q","--short","HEAD"),o=await f(i,"config",`branch.${r}.remote`);return f(i,"config",`remote.${o||e}.url`)},C=async e=>f(e,"rev-parse","--absolute-git-dir"),pt=e=>{let t=["blame","-C","--incremental","--",e];return s("ignoreWhitespace")&&t.splice(1,0,"-w"),c.info(`${$()} ${t.join(" ")}`),(0,at.spawn)($(),t,{cwd:(0,W.dirname)(e)})},ut=async()=>{let e=l();if(!u(e))return"";let{fileName:t}=e.document;return f(t,"ls-files","--full-name","--",t)},dt=async e=>{let t=l();if(!u(t))return"";let i=await f(t.document.fileName,"rev-parse","--abbrev-ref",`${e}/HEAD`);return g(i,"/")[1]};var P=class{constructor(t){this.fileName=t}store;process;killed=!1;getBlame(){return this.store??=this.blame(),this.store}dispose(){this.process?.kill(),this.killed=!0}async*run(t){this.process=pt(t),yield*it(this.process?.stdout),await rt(this.process?.stderr)}async blame(){let t=new Map,i=await(0,gt.realpath)(this.fileName);try{for await(let r of this.run(i))t.set(r.line.result,r)}catch(r){c.error(r),this.dispose()}if(!this.killed)return(0,ft.relative)(this.fileName,i)?c.info(`Blamed "${i}" (resolved via symlink from "${this.fileName}")`):c.info(`Blamed "${i}"`),t}};var E=class{list=[];storage=new Map;processing=new Set;_maxParallel;constructor(t=2){this.maxParallel=t}add(t){return new Promise(i=>{this.storage.set(t,i),this.processing.size<this.maxParallel?this.startFunction(t):this.list.push(t)})}updateParalell(t){let i=this.maxParallel;this.maxParallel=t;let r=Math.max(0,this.maxParallel-i);for(let o=0;o<r;o++)this.runNext()}set maxParallel(t){this._maxParallel=t}get maxParallel(){return Math.max(1,Number(this._maxParallel))}startFunction(t){this.processing.add(t);let i=this.storage.get(t);this.storage.delete(t),i&&t().then(r=>i(r)).finally(()=>{this.processing.delete(t),this.runNext()})}runNext(){if(this.processing.size<this.maxParallel){let t=this.list.shift();t&&this.startFunction(t)}}};var ht=require("vscode");var U=class{files=new Map;fsWatchers=new Map;blameQueue=new E(s("parallelBlames"));configChange;constructor(){this.configChange=ht.workspace.onDidChangeConfiguration(t=>{t.affectsConfiguration("gitblame")&&this.blameQueue.updateParalell(s("parallelBlames"))})}async file(t){return this.get(t)}async getLine(t,i){let r=i+1;return(await this.get(t))?.get(r)}async removeFromRepository(t){for(let[i,r]of this.files)(await r)?.gitRoot===t&&this.remove(i)}async remove(t){(await(await this.files.get(t))?.file)?.dispose(),this.fsWatchers.get(t)?.close(),this.files.delete(t),this.fsWatchers.delete(t)}dispose(){for(let[t]of this.files)this.remove(t);this.configChange.dispose()}async get(t){if(this.files.has(t))return(await this.files.get(t))?.store;let i=this.create(t).then(({file:r,gitRoot:o})=>r?(this.fsWatchers.set(t,(0,F.watch)(t,()=>{this.remove(t)})),{file:r,store:this.blameQueue.add(()=>r.getBlame()),gitRoot:o}):{file:r,store:Promise.resolve(void 0),gitRoot:o});return this.files.set(t,i),(await i)?.store}async create(t){try{await F.promises.access(t);let i=C(t);if(await i)return{gitRoot:await i,file:new P(t)}}catch{}return c.info(`Will not blame '${t}'. Outside the current workspace.`),{gitRoot:"",file:void 0}}};var Tt=require("vscode"),Ct=require("node:url");var vt=require("node:url"),yt=e=>{let t;try{t=new vt.URL(e)}catch{return!1}return t.href!==e||t.protocol!=="http:"&&t.protocol!=="https:"?!1:!!(t.hostname&&t.pathname)};var xt=require("node:url");var G=e=>e.replace(/\.git$/i,""),L=e=>G(e).replace(/^([a-z-]+:\/\/)?([\w%:\\]+?@)?/i,"").replace(/:([a-z_.~+%-][a-z0-9_.~+%-]+)\/?/i,"/$1/");var wt=e=>{let t=/^(https?):/.exec(e)?.[1],i;try{i=new xt.URL(`${t??"https"}://${L(e)}`)}catch{return}return i.port=t?i.port:"",i};var bt=e=>/([a-zA-Z0-9_~%+.-]*?)(\.git)?$/.exec(e)?.[1]??"";var z=require("vscode"),I=(e,t=[])=>Promise.resolve(z.window.showInformationMessage(e,...t)),y=(e,...t)=>Promise.resolve(z.window.showErrorMessage(e,...t));var j=(e,t,i="/")=>e.split(i).filter(o=>!!o)[Number(t)]||"invalid-index",te=({hostname:e})=>t=>t===""?e:j(e,t,"."),ee=e=>{if(/^[a-z]+?@/.test(e)){let[,t]=g(e,":");return(i="")=>i===""?`/${t}`:j(t,i)}try{let{pathname:t}=new Ct.URL(e);return(i="")=>i===""?t:j(t,i)}catch{return()=>"no-remote-url"}},ie=e=>(s("pluralWebPathSubstrings")??[]).some(t=>e.includes(t)),re=async e=>{let t=s("remoteName"),i=await ct(t);if(i===t)return;let r=L(await lt(t)),o=wt(r),n=await ut(),m=await dt(t);return{hash:e.commit.hash,"tool.protocol":o?.protocol??"https:","tool.commitpath":`/commit${ie(r)?"s":""}/`,"project.name":bt(i),"project.remote":r,"project.defaultbranch":m,"gitorigin.hostname":o?te(o):"no-origin-url","gitorigin.path":ee(G(i)),"gitorigin.port":o?.port?`:${o.port}`:"","file.path":n,"file.path.result":n,"file.path.source":e.filename,"file.line":e.line.result.toString(),"file.line.result":e.line.result.toString(),"file.line.source":e.line.source.toString()}},A=async e=>{if(!e||d(e.commit))return;let t=await re(e);if(t===void 0)return;let i=v(s("commitUrl"),t);if(yt(i))return Tt.Uri.parse(i,!0);y(`Malformed gitblame.commitUrl: '${i}' from '${s("commitUrl")}'`)};var Pt=require("node:fs"),k=require("node:path");var R=class{heads=new Map;filesWithFoundHeads=new Set;callback=()=>{};onChange(t){this.callback=t}async addFile(t){if(this.filesWithFoundHeads.has(t))return;this.filesWithFoundHeads.add(t);let i=await C(t),r=this.normalizeWindowsDriveLetter(i);if(this.heads.has(r)===!0||i==="")return;let n=(0,k.resolve)(r,"..");this.heads.set(r,(0,Pt.watch)((0,k.join)(r,"HEAD"),{persistent:!1},()=>this.callback({gitRoot:r,repositoryRoot:n})))}dispose(){for(let[,t]of this.heads)t.close();this.callback=()=>{}}normalizeWindowsDriveLetter(t){return t.length===0?"":t[0].toLowerCase()+t.substr(1)}};var B=class{disposable;blame;view;headWatcher;ongoingViewUpdateRejects=[];constructor(){this.blame=new U,this.view=new T,this.headWatcher=new R,this.disposable=this.setupListeners(),this.updateView()}async blameLink(){let t=await A(await this.commit(!0));t?a.commands.executeCommand("vscode.open",t):y("Empty gitblame.commitUrl")}async showMessage(){let t=await this.commit();if(!t||d(t.commit)){this.view.clear();return}let i=v(s("infoMessageFormat"),b(t.commit)),r=await A(t),o=[];r&&o.push({title:"Online",action(){a.commands.executeCommand("vscode.open",r)}}),o.push({title:"Terminal",action:()=>this.runGitShow()}),this.view.set(t.commit,l()),(await I(i,o))?.action()}async copyHash(){let t=await this.commit(!0);t&&!d(t.commit)&&(await a.env.clipboard.writeText(t.commit.hash),I("Copied hash"))}async copyToolUrl(){let t=await this.commit(!0),i=await A(t);i?(await a.env.clipboard.writeText(i.toString()),I("Copied tool URL")):y("gitblame.commitUrl config empty")}async runGitShow(){let t=l();if(!u(t))return;let r=(await this.commit(!0))?.commit.hash??"HEAD";if(!/^(\w{40}|HEAD)$/.test(r))return;let o=s("ignoreWhitespace")?"-w ":"",n=a.window.createTerminal({name:`Git Blame: git show ${r}`,iconPath:new a.ThemeIcon("git-commit"),isTransient:!0,cwd:(0,Et.dirname)(t.document.fileName)});n.sendText(`git show ${o}${r}; exit 0`,!0),n.show()}dispose(){this.view.dispose(),this.disposable.dispose(),this.blame.dispose(),this.headWatcher.dispose()}setupListeners(){let t=i=>{let{scheme:r}=i.document.uri;(r==="file"||r==="untitled")&&this.updateView(i)};return this.headWatcher.onChange(({repositoryRoot:i})=>this.blame.removeFromRepository(i)),a.Disposable.from(a.window.onDidChangeActiveTextEditor(i=>{u(i)?(this.view.activity(),this.blame.file(i.document.fileName),t(i)):this.view.clear()}),a.window.onDidChangeTextEditorSelection(({textEditor:i})=>{t(i)}),a.workspace.onDidSaveTextDocument(()=>{this.updateView()}),a.workspace.onDidCloseTextDocument(i=>{this.blame.remove(i.fileName)}),a.workspace.onDidChangeTextDocument(({document:i})=>{let r=l();r?.document===i&&this.updateView(r,!1)}))}async delayUpdateView(t){if(t>0)try{return await new Promise((i,r)=>{this.ongoingViewUpdateRejects.push(r),setTimeout(()=>i(!0),t)})}catch{return!1}return!0}async updateView(t=l(),i=!0){if(!this.view.preUpdate(t))return;this.headWatcher.addFile(t.document.fileName);let r=N(t),o=await this.blame.getLine(t.document.fileName,t.selection.active.line),n=l();if(!u(n))return;let m=N(n);(r===m||m===O)&&this.view.set(o?.commit,t,i)}async commit(t=!1){let i=()=>y("Unable to blame current line"),r=l();if(!u(r)){i();return}t||this.view.activity(),this.headWatcher.addFile(r.document.fileName);let o=await this.blame.getLine(r.document.fileName,r.selection.active.line);return o||i(),o}};var w=(e,t)=>Ut.commands.registerCommand(`gitblame.${e}`,t),oe=e=>{let t=new B;e.subscriptions.push(t,c.getInstance(),w("quickInfo",()=>{t.showMessage()}),w("online",()=>{t.blameLink()}),w("addCommitHashToClipboard",()=>{t.copyHash()}),w("addToolUrlToClipboard",()=>{t.copyToolUrl()}),w("gitShow",()=>{t.runGitShow()}))};
